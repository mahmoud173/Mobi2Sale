// <auto-generated />
using System;
using Entities.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(Mobi2saleContext))]
    [Migration("20200412120421_initialdataBase")]
    partial class initialdataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Model.Forcasts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Summary");

                    b.HasKey("Id");

                    b.ToTable("Forcasts");
                });

            modelBuilder.Entity("Entities.Model.LkpCountries", b =>
                {
                    b.Property<int>("PkCountriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk_Countries_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PkCountriesId");

                    b.ToTable("lkp_Countries","Admin");
                });

            modelBuilder.Entity("Entities.Model.LkpDistricts", b =>
                {
                    b.Property<int>("PkDistrictsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk_Districts_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GovernorateId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PkDistrictsId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("lkp_Districts","Admin");
                });

            modelBuilder.Entity("Entities.Model.LkpGovernorates", b =>
                {
                    b.Property<int>("PkGovernoratesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk_Governorates_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PkGovernoratesId");

                    b.HasIndex("CountryId");

                    b.ToTable("lkp_Governorates","Admin");
                });

            modelBuilder.Entity("Entities.Model.TblAdditionVoucherDetails", b =>
                {
                    b.Property<Guid>("PkAdditionVoucherDetailsId")
                        .HasColumnName("pk_AdditionVoucherDetails_Id");

                    b.Property<Guid>("FkAdditionVouchersAdditionVoucherDetailsAdditionVouchersId")
                        .HasColumnName("fk_AdditionVouchers_AdditionVoucherDetails_AdditionVouchersId");

                    b.Property<Guid>("FkItemsAdditionVoucherDetailsItemsId")
                        .HasColumnName("fk_Items_AdditionVoucherDetails_ItemsId");

                    b.Property<int>("Quantity");

                    b.HasKey("PkAdditionVoucherDetailsId");

                    b.HasIndex("FkAdditionVouchersAdditionVoucherDetailsAdditionVouchersId");

                    b.HasIndex("FkItemsAdditionVoucherDetailsItemsId");

                    b.ToTable("tbl_AdditionVoucherDetails","Store");
                });

            modelBuilder.Entity("Entities.Model.TblAdditionVouchers", b =>
                {
                    b.Property<Guid>("PkAdditionVouchersId")
                        .HasColumnName("pk_AdditionVouchers_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3216442+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3139232+02:00')");

                    b.Property<Guid>("FkEmployeesAdditionVoucherEmployeeId")
                        .HasColumnName("fk_Employees_AdditionVoucher_EmployeeId");

                    b.Property<Guid>("FkStoresAdditionVoucherStoresId")
                        .HasColumnName("fk_Stores_AdditionVoucher_StoresId");

                    b.Property<Guid>("FkSuppliersAdditionVoucherSuppliersId")
                        .HasColumnName("fk_Suppliers_AdditionVoucher_SuppliersId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3217243+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("SerialNo");

                    b.HasKey("PkAdditionVouchersId");

                    b.HasIndex("FkEmployeesAdditionVoucherEmployeeId");

                    b.HasIndex("FkStoresAdditionVoucherStoresId");

                    b.HasIndex("FkSuppliersAdditionVoucherSuppliersId");

                    b.ToTable("tbl_AdditionVouchers","Store");
                });

            modelBuilder.Entity("Entities.Model.TblBranches", b =>
                {
                    b.Property<Guid>("PkBranchesId")
                        .HasColumnName("pk_Branches_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4304629+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("FkSalesmenBranchesMgrId")
                        .HasColumnName("fk_Salesmen_Branches_MgrId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4305224+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("PkBranchesId");

                    b.ToTable("tbl_Branches","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblBranchStocks", b =>
                {
                    b.Property<Guid>("PkBranchStockId")
                        .HasColumnName("pk_BranchStock_Id");

                    b.Property<string>("BarCode");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3439990+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkBranchBranchStockBranchId")
                        .HasColumnName("fk_Branch_BranchStock_BranchId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsMobile");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3440805+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.HasKey("PkBranchStockId");

                    b.HasIndex("FkBranchBranchStockBranchId");

                    b.ToTable("tbl_BranchStocks","Store");
                });

            modelBuilder.Entity("Entities.Model.TblCategories", b =>
                {
                    b.Property<Guid>("PkCategoriesId")
                        .HasColumnName("pk_Categories_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4374693+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4375464+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PkCategoriesId");

                    b.ToTable("tbl_Categories","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblClient", b =>
                {
                    b.Property<Guid>("PkClientId")
                        .HasColumnName("pk_Client_Id");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<decimal>("Bonus");

                    b.Property<decimal>("BonusBeforeTime");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4479911+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Fax");

                    b.Property<int>("FkClientsDistrictsDistrictId")
                        .HasColumnName("fk_Clients_Districts_DistrictId");

                    b.Property<string>("IdentityId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<decimal>("Limit")
                        .HasColumnType("money");

                    b.Property<string>("ManagerName")
                        .IsRequired();

                    b.Property<string>("Mobile1")
                        .IsRequired();

                    b.Property<string>("Mobile2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4480828+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<decimal>("Target")
                        .HasColumnType("money");

                    b.Property<DateTime>("TargetEnd")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4515727+02:00')");

                    b.Property<DateTime>("TargetSatrt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4516256+02:00')");

                    b.Property<string>("TaxRecordNumber")
                        .IsRequired();

                    b.Property<string>("TaxRecordUrl");

                    b.Property<string>("TradeRecordNumber")
                        .IsRequired();

                    b.Property<string>("TradeRecordUrl");

                    b.HasKey("PkClientId");

                    b.HasIndex("FkClientsDistrictsDistrictId");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasFilter("([IdentityId] IS NOT NULL)");

                    b.ToTable("tbl_Client","Admin");
                });

            modelBuilder.Entity("Entities.Model.TblClientAccounts", b =>
                {
                    b.Property<Guid>("PkClientAccountsId")
                        .HasColumnName("pk_ClientAccounts_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5728866+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<decimal>("Credit");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5728354+02:00')");

                    b.Property<decimal>("Debit");

                    b.Property<Guid>("FkClientsClientAccountsClientId")
                        .HasColumnName("fk_Clients_ClientAccounts_ClientId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5729475+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<Guid>("TransactionId");

                    b.HasKey("PkClientAccountsId");

                    b.HasIndex("FkClientsClientAccountsClientId");

                    b.ToTable("tbl_ClientAccounts","Accounting");
                });

            modelBuilder.Entity("Entities.Model.TblDepartments", b =>
                {
                    b.Property<Guid>("PkDepartmentsId")
                        .HasColumnName("pk_Departments_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4563958+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<Guid>("FkEmployeesDepartmentsMgrId")
                        .HasColumnName("fk_Employees_Departments_MgrId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4564581+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("PkDepartmentsId");

                    b.ToTable("tbl_Departments","HR");
                });

            modelBuilder.Entity("Entities.Model.TblEmployees", b =>
                {
                    b.Property<Guid>("PkEmployeesId")
                        .HasColumnName("pk_Employees_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4655407+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("DateOfBrith");

                    b.Property<Guid>("DepartmentId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<int>("FkDistrictEmployeesDistrictId")
                        .HasColumnName("fk_District_Employees_DistrictId");

                    b.Property<string>("IdentityId");

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Mobile1")
                        .IsRequired();

                    b.Property<string>("Mobile2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4656221+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Phone");

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<Guid?>("SubDepartmentId");

                    b.Property<string>("VisaImage")
                        .IsRequired();

                    b.Property<string>("VisaNumber")
                        .IsRequired();

                    b.HasKey("PkEmployeesId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("FkDistrictEmployeesDistrictId");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("tbl_Employees","HR");
                });

            modelBuilder.Entity("Entities.Model.TblExchangeVoucherDetails", b =>
                {
                    b.Property<Guid>("PkExchangeVoucherDetailsId")
                        .HasColumnName("pk_ExchangeVoucherDetails_Id");

                    b.Property<string>("BarCode")
                        .IsRequired();

                    b.Property<Guid>("FkExchangeVouchersExchangeVoucherDetailsExchangeVouchersId")
                        .HasColumnName("fk_ExchangeVouchers_ExchangeVoucherDetails_ExchangeVouchersId");

                    b.Property<Guid>("FkItemsExchangeVoucherDetailsItemsId")
                        .HasColumnName("fk_Items_ExchangeVoucherDetails_ItemsId");

                    b.Property<int>("Quantity");

                    b.HasKey("PkExchangeVoucherDetailsId");

                    b.HasIndex("FkExchangeVouchersExchangeVoucherDetailsExchangeVouchersId");

                    b.HasIndex("FkItemsExchangeVoucherDetailsItemsId");

                    b.ToTable("tbl_ExchangeVoucherDetails","Store");
                });

            modelBuilder.Entity("Entities.Model.TblExchangeVouchers", b =>
                {
                    b.Property<Guid>("PkExchangeVouchersId")
                        .HasColumnName("pk_ExchangeVouchers_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3526370+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkStoresExchangeVoucherFromStoresId")
                        .HasColumnName("fk_Stores_ExchangeVoucher_FromStoresId");

                    b.Property<Guid>("FkToStoresId")
                        .HasColumnName("fk_ToStoresId");

                    b.Property<bool?>("IsBranch")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3527182+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<int>("SerialNo");

                    b.HasKey("PkExchangeVouchersId");

                    b.HasIndex("FkStoresExchangeVoucherFromStoresId");

                    b.ToTable("tbl_ExchangeVouchers","Store");
                });

            modelBuilder.Entity("Entities.Model.TblFavorites", b =>
                {
                    b.Property<Guid>("PkFavoritesId")
                        .HasColumnName("pk_Favorites_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3901801+02:00')");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("FkClientId")
                        .HasColumnName("fk_Client_Id");

                    b.Property<Guid>("FkItemsId")
                        .HasColumnName("fk_Items_Id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3903097+02:00')");

                    b.Property<string>("ModifiedBy");

                    b.HasKey("PkFavoritesId");

                    b.HasIndex("FkClientId");

                    b.HasIndex("FkItemsId");

                    b.ToTable("tbl_Favorites","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblHandStockValue", b =>
                {
                    b.Property<Guid>("PkHandStockValueId")
                        .HasColumnName("pk_HandStockValue_Id");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3647144+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkSalesmanHandStockValueSalesId")
                        .HasColumnName("fk_Salesman_HandStockValue_SalesId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3647812+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.HasKey("PkHandStockValueId");

                    b.HasIndex("FkSalesmanHandStockValueSalesId");

                    b.ToTable("tbl_HandStockValue","Store");
                });

            modelBuilder.Entity("Entities.Model.TblIndoorInvoiceDetails", b =>
                {
                    b.Property<Guid>("PkIndoorInvoiceDetailsId")
                        .HasColumnName("pk_IndoorInvoiceDetails_Id");

                    b.Property<string>("Barcode")
                        .IsRequired();

                    b.Property<decimal>("CostPrice");

                    b.Property<Guid>("FkIndoorInvoiceHeaderIndoorInvoiceDetailsHeaderId")
                        .HasColumnName("fk_IndoorInvoiceHeader_IndoorInvoiceDetails_HeaderId");

                    b.Property<Guid>("FkItemsAdditionVoucherDetailsItemsId")
                        .HasColumnName("fk_Items_AdditionVoucherDetails_ItemsId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("RetailPrice");

                    b.HasKey("PkIndoorInvoiceDetailsId");

                    b.HasIndex("FkIndoorInvoiceHeaderIndoorInvoiceDetailsHeaderId");

                    b.HasIndex("FkItemsAdditionVoucherDetailsItemsId");

                    b.ToTable("tbl_IndoorInvoiceDetails","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblIndoorInvoiceHeader", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<decimal>("CostPrice");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5538141+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkBranchesIndoorSalesInvoiceBranchId")
                        .HasColumnName("fk_Branches_IndoorSalesInvoice_BranchId");

                    b.Property<Guid>("FkEmployeesIndoorSalesInvoiceEmployeeId")
                        .HasColumnName("fk_Employees_IndoorSalesInvoice_EmployeeId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5538777+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("SerialNo");

                    b.Property<decimal>("TotalPrice");

                    b.HasKey("Id");

                    b.HasIndex("FkBranchesIndoorSalesInvoiceBranchId");

                    b.HasIndex("FkEmployeesIndoorSalesInvoiceEmployeeId");

                    b.ToTable("tbl_IndoorInvoiceHeader","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblItems", b =>
                {
                    b.Property<Guid>("PkItemsId")
                        .HasColumnName("pk_Items_Id");

                    b.Property<int?>("Available")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("([Quantity]-[BookedUp])");

                    b.Property<int>("BookedUp");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Color");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired();

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4754110+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<Guid>("FkOffersItemsOfferId")
                        .HasColumnName("fk_Offers_Items_OfferId");

                    b.Property<Guid>("FkSubCategoriesItemsSubcategoryId")
                        .HasColumnName("fk_subCategories_Items_SubcategoryId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("MainImageUrl")
                        .IsRequired();

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4754755+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("money");

                    b.Property<int>("SafeLimit");

                    b.Property<decimal>("SupplyPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("WholesalePrice")
                        .HasColumnType("money");

                    b.HasKey("PkItemsId");

                    b.HasIndex("FkOffersItemsOfferId");

                    b.HasIndex("FkSubCategoriesItemsSubcategoryId");

                    b.ToTable("tbl_Items","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblItemTransactionss", b =>
                {
                    b.Property<Guid>("PkItemTransactionId")
                        .HasColumnName("pk_ItemTransaction_Id");

                    b.Property<Guid>("FkItemsStocksItemId")
                        .HasColumnName("fk_Items_Stocks_ItemId");

                    b.Property<string>("From")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<int>("SerialNo");

                    b.Property<string>("To")
                        .IsRequired();

                    b.Property<DateTime>("TransactionDate");

                    b.Property<string>("TransactionType")
                        .IsRequired();

                    b.Property<Guid>("VoucherId");

                    b.HasKey("PkItemTransactionId");

                    b.HasIndex("FkItemsStocksItemId");

                    b.ToTable("tbl_ItemTransactionss","Store");
                });

            modelBuilder.Entity("Entities.Model.TblOffers", b =>
                {
                    b.Property<Guid>("PkOffersId")
                        .HasColumnName("pk_Offers_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5401593+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5402211+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("OfferPctg");

                    b.Property<bool?>("ReadOnly")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int>("Target");

                    b.HasKey("PkOffersId");

                    b.ToTable("tbl_Offers","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblOfferTarget", b =>
                {
                    b.Property<Guid>("PkOfferTargetId")
                        .HasColumnName("pk_OfferTarget_Id");

                    b.Property<Guid>("FkOfferOfferTargetOffreId")
                        .HasColumnName("fk_Offer_OfferTarget_OffreId");

                    b.Property<Guid>("TargetId");

                    b.HasKey("PkOfferTargetId");

                    b.HasIndex("FkOfferOfferTargetOffreId");

                    b.ToTable("tbl_OfferTarget","Store");
                });

            modelBuilder.Entity("Entities.Model.TblOrderDetails", b =>
                {
                    b.Property<Guid>("PkOrderDetailsId")
                        .HasColumnName("pk_OrderDetails_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4068740+02:00')");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("FkItemsId")
                        .HasColumnName("fk_Items_Id");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4069555+02:00')");

                    b.Property<string>("ModifiedBy");

                    b.Property<Guid>("OrderId")
                        .HasColumnName("OrderID");

                    b.Property<int>("Quantity");

                    b.HasKey("PkOrderDetailsId");

                    b.HasIndex("FkItemsId");

                    b.HasIndex("OrderId");

                    b.ToTable("tbl_OrderDetails","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblOrders", b =>
                {
                    b.Property<Guid>("PkOrdersId")
                        .HasColumnName("pk_Orders_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3999346+02:00')");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("FkClientsOrdersClientId")
                        .HasColumnName("fk_Clients_Orders_ClientId");

                    b.Property<bool?>("IsCancelled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3999858+02:00')");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("Notes");

                    b.Property<bool?>("OnDelivery")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("Order_Date");

                    b.Property<bool>("OrderIsOrder")
                        .HasColumnName("Order_IsOrder");

                    b.Property<bool?>("OrderIsPaid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Order_IsPaid")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int>("OrderNo");

                    b.Property<string>("OrderStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(N'No Action')");

                    b.Property<decimal>("TotalAmount");

                    b.Property<decimal>("TotalCost");

                    b.HasKey("PkOrdersId");

                    b.HasIndex("FkClientsOrdersClientId");

                    b.ToTable("tbl_Orders","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblPromos", b =>
                {
                    b.Property<Guid>("PkPromosId")
                        .HasColumnName("pk_Promos_Id");

                    b.Property<bool?>("AllClients")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5593234+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5593843+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("OfferPctg");

                    b.HasKey("PkPromosId");

                    b.ToTable("tbl_Promos","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblPromoTargets", b =>
                {
                    b.Property<Guid>("PkPromoTargetsId")
                        .HasColumnName("pk_PromoTargets_Id");

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("FkPromosPromoTargetsPromoId")
                        .HasColumnName("fk_Promos_PromoTargets_PromoId");

                    b.HasKey("PkPromoTargetsId");

                    b.HasIndex("ClientId");

                    b.HasIndex("FkPromosPromoTargetsPromoId");

                    b.ToTable("tbl_PromoTargets","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblSalesArea", b =>
                {
                    b.Property<Guid>("PkSalesAreaId")
                        .HasColumnName("pk_SalesArea_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4875410+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4876006+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PkSalesAreaId");

                    b.ToTable("tbl_SalesArea","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblSalesAreaClients", b =>
                {
                    b.Property<Guid>("PkSalesAreaClientId")
                        .HasColumnName("pk_SalesAreaClient_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4822684+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkSalesAreaClientsClientsClientId")
                        .HasColumnName("fk_SalesAreaClients_Clients_ClientId");

                    b.Property<Guid>("FkSalesAreaClientsSalesAreasSalesAreaId")
                        .HasColumnName("fk_SalesAreaClients_SalesAreas_salesAreaId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4823254+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.HasKey("PkSalesAreaClientId");

                    b.HasIndex("FkSalesAreaClientsClientsClientId")
                        .IsUnique();

                    b.HasIndex("FkSalesAreaClientsSalesAreasSalesAreaId");

                    b.ToTable("tbl_SalesAreaClients","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblSalesAreaPersonnel", b =>
                {
                    b.Property<Guid>("PkSalesAreaPersonnelId")
                        .HasColumnName("pk_SalesAreaPersonnel_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4932542+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkSalesAreaPersonnelSalesAreasSalesAreaId")
                        .HasColumnName("fk_SalesAreaPersonnel_SalesAreas_salesAreaId");

                    b.Property<Guid>("FkSalesAreaPersonnelSalesmenSalesId")
                        .HasColumnName("fk_SalesAreaPersonnel_Salesmen_salesId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsSupervisor");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.4933148+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.HasKey("PkSalesAreaPersonnelId");

                    b.HasIndex("FkSalesAreaPersonnelSalesAreasSalesAreaId");

                    b.HasIndex("FkSalesAreaPersonnelSalesmenSalesId")
                        .IsUnique();

                    b.ToTable("tbl_SalesAreaPersonnel","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblSalesmen", b =>
                {
                    b.Property<Guid>("PkSalesmanId")
                        .HasColumnName("pk_Salesman_Id");

                    b.Property<decimal>("Bonus");

                    b.Property<decimal>("BonusBeforeTime");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5018798+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkSalesmenEmployeeId")
                        .HasColumnName("fk_Salesmen_Employee_Id");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<decimal>("Limit")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5018215+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<decimal>("Target")
                        .HasColumnType("money");

                    b.Property<DateTime>("TargetEnd");

                    b.Property<DateTime>("TargetSatrt");

                    b.HasKey("PkSalesmanId");

                    b.HasIndex("FkSalesmenEmployeeId")
                        .IsUnique();

                    b.ToTable("tbl_Salesmen","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblSalesStock", b =>
                {
                    b.Property<Guid>("PkSalesStockId")
                        .HasColumnName("pk_SalesStock_Id");

                    b.Property<string>("BarCode");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3805962+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<Guid>("FkExchangeVouchersSalesStockExchangeVoucherId")
                        .HasColumnName("fk_ExchangeVouchers_SalesStock_ExchangeVoucherId");

                    b.Property<Guid>("FkItemsSalesStockItemsId")
                        .HasColumnName("fk_Items_SalesStock_ItemsId");

                    b.Property<Guid>("FkSalesmanSalesStockSalesId")
                        .HasColumnName("fk_Salesman_SalesStock_SalesId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool>("IsMobile");

                    b.Property<bool>("Isclient");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.3806535+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.HasKey("PkSalesStockId");

                    b.HasIndex("FkItemsSalesStockItemsId");

                    b.HasIndex("FkSalesmanSalesStockSalesId");

                    b.ToTable("tbl_SalesStock","Store");
                });

            modelBuilder.Entity("Entities.Model.TblStocks", b =>
                {
                    b.Property<Guid>("PkStocksId")
                        .HasColumnName("pk_Stocks_Id");

                    b.Property<Guid>("FkItemsStocksItemId")
                        .HasColumnName("fk_Items_Stocks_ItemId");

                    b.Property<int>("QtyPerStore");

                    b.Property<Guid>("StoreId");

                    b.HasKey("PkStocksId");

                    b.HasIndex("FkItemsStocksItemId");

                    b.ToTable("tbl_Stocks","Store");
                });

            modelBuilder.Entity("Entities.Model.TblSubCategories", b =>
                {
                    b.Property<Guid>("PkSubCategoriesId")
                        .HasColumnName("pk_SubCategories_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5072697+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<Guid>("FkCategoriesSubCategoriesCategoryId")
                        .HasColumnName("fk_Categories_subCategories_CategoryId");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5073276+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PkSubCategoriesId");

                    b.HasIndex("FkCategoriesSubCategoriesCategoryId");

                    b.ToTable("tbl_SubCategories","Sales");
                });

            modelBuilder.Entity("Entities.Model.TblSubDepartments", b =>
                {
                    b.Property<Guid>("PkSubDepartmentsId")
                        .HasColumnName("pk_SubDepartments_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5144659+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<Guid>("FkDepartmentsSubDepartmentsDepartmentId")
                        .HasColumnName("fk_Departments_SubDepartments_DepartmentId");

                    b.Property<Guid>("FkEmployeesSubDepartmentsManagerId")
                        .HasColumnName("fk_Employees_SubDepartments_ManagerID");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<bool?>("IsStore")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(1)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5145315+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.HasKey("PkSubDepartmentsId");

                    b.HasIndex("FkDepartmentsSubDepartmentsDepartmentId");

                    b.ToTable("tbl_SubDepartments","HR");
                });

            modelBuilder.Entity("Entities.Model.TblSupplierAccounts", b =>
                {
                    b.Property<Guid>("PkSupplierAccountsId")
                        .HasColumnName("pk_SupplierAccounts_Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5795629+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<decimal>("Credit");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5795113+02:00')");

                    b.Property<decimal>("Debit");

                    b.Property<Guid>("FkSuppliersSupplierAccountsSuppliersId")
                        .HasColumnName("fk_Suppliers_SupplierAccounts_SuppliersId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5796080+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<Guid>("TransactionId");

                    b.HasKey("PkSupplierAccountsId");

                    b.HasIndex("FkSuppliersSupplierAccountsSuppliersId");

                    b.ToTable("tbl_SupplierAccounts","Accounting");
                });

            modelBuilder.Entity("Entities.Model.TblSuppliers", b =>
                {
                    b.Property<Guid>("PkSuppliersId")
                        .HasColumnName("pk_Suppliers_Id");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5221625+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("Fax")
                        .IsRequired();

                    b.Property<int>("FkCountrySupplierCountryId")
                        .HasColumnName("fk_Country_Supplier_CountryId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("Mobile1")
                        .IsRequired();

                    b.Property<string>("Mobile2");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5222252+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<string>("TaxRecordNumber");

                    b.Property<string>("TaxRecordUrl");

                    b.Property<string>("TradeRecordNumber");

                    b.Property<string>("TradeRecordUrl");

                    b.HasKey("PkSuppliersId");

                    b.HasIndex("FkCountrySupplierCountryId");

                    b.ToTable("tbl_Suppliers","Purchase");
                });

            modelBuilder.Entity("Entities.Model.TblVisit", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTime>("CraetedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5659051+02:00')");

                    b.Property<string>("CreatedBy")
                        .IsRequired();

                    b.Property<string>("FeedBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(N'Open Visit')");

                    b.Property<Guid>("FkClientsVisitClientId")
                        .HasColumnName("fk_Clients_Visit_ClientId");

                    b.Property<Guid>("FkSalesmanVisitSalesmanId")
                        .HasColumnName("fk_Salesman_Visit_SalesmanId");

                    b.Property<bool?>("IsDeleted")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5659518+02:00')");

                    b.Property<string>("ModifiedBy")
                        .IsRequired();

                    b.Property<string>("SerialNo");

                    b.Property<DateTime>("VisitDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('2020-04-07T01:01:37.5658536+02:00')");

                    b.Property<string>("VisitImage");

                    b.HasKey("Id");

                    b.HasIndex("FkClientsVisitClientId");

                    b.HasIndex("FkSalesmanVisitSalesmanId");

                    b.ToTable("tbl_Visit","Sales");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Model.LkpDistricts", b =>
                {
                    b.HasOne("Entities.Model.LkpGovernorates", "Governorate")
                        .WithMany("LkpDistricts")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.LkpGovernorates", b =>
                {
                    b.HasOne("Entities.Model.LkpCountries", "Country")
                        .WithMany("LkpGovernorates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblAdditionVoucherDetails", b =>
                {
                    b.HasOne("Entities.Model.TblAdditionVouchers", "FkAdditionVouchersAdditionVoucherDetailsAdditionVouchers")
                        .WithMany("TblAdditionVoucherDetails")
                        .HasForeignKey("FkAdditionVouchersAdditionVoucherDetailsAdditionVouchersId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblItems", "FkItemsAdditionVoucherDetailsItems")
                        .WithMany("TblAdditionVoucherDetails")
                        .HasForeignKey("FkItemsAdditionVoucherDetailsItemsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblAdditionVouchers", b =>
                {
                    b.HasOne("Entities.Model.TblEmployees", "FkEmployeesAdditionVoucherEmployee")
                        .WithMany("TblAdditionVouchers")
                        .HasForeignKey("FkEmployeesAdditionVoucherEmployeeId");

                    b.HasOne("Entities.Model.TblSubDepartments", "FkStoresAdditionVoucherStores")
                        .WithMany("TblAdditionVouchers")
                        .HasForeignKey("FkStoresAdditionVoucherStoresId");

                    b.HasOne("Entities.Model.TblSuppliers", "FkSuppliersAdditionVoucherSuppliers")
                        .WithMany("TblAdditionVouchers")
                        .HasForeignKey("FkSuppliersAdditionVoucherSuppliersId");
                });

            modelBuilder.Entity("Entities.Model.TblBranchStocks", b =>
                {
                    b.HasOne("Entities.Model.TblBranches", "FkBranchBranchStockBranch")
                        .WithMany("TblBranchStocks")
                        .HasForeignKey("FkBranchBranchStockBranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblItems", "FkBranchBranchStockBranchNavigation")
                        .WithMany("TblBranchStocks")
                        .HasForeignKey("FkBranchBranchStockBranchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblClient", b =>
                {
                    b.HasOne("Entities.Model.LkpDistricts", "FkClientsDistrictsDistrict")
                        .WithMany("TblClient")
                        .HasForeignKey("FkClientsDistrictsDistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblClientAccounts", b =>
                {
                    b.HasOne("Entities.Model.TblClient", "FkClientsClientAccountsClient")
                        .WithMany("TblClientAccounts")
                        .HasForeignKey("FkClientsClientAccountsClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblEmployees", b =>
                {
                    b.HasOne("Entities.Model.TblDepartments", "Department")
                        .WithMany("TblEmployees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.LkpDistricts", "FkDistrictEmployeesDistrict")
                        .WithMany("TblEmployees")
                        .HasForeignKey("FkDistrictEmployeesDistrictId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblSubDepartments", "SubDepartment")
                        .WithMany("TblEmployees")
                        .HasForeignKey("SubDepartmentId");
                });

            modelBuilder.Entity("Entities.Model.TblExchangeVoucherDetails", b =>
                {
                    b.HasOne("Entities.Model.TblExchangeVouchers", "FkExchangeVouchersExchangeVoucherDetailsExchangeVouchers")
                        .WithMany("TblExchangeVoucherDetails")
                        .HasForeignKey("FkExchangeVouchersExchangeVoucherDetailsExchangeVouchersId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblItems", "FkItemsExchangeVoucherDetailsItems")
                        .WithMany("TblExchangeVoucherDetails")
                        .HasForeignKey("FkItemsExchangeVoucherDetailsItemsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblExchangeVouchers", b =>
                {
                    b.HasOne("Entities.Model.TblSubDepartments", "FkStoresExchangeVoucherFromStores")
                        .WithMany("TblExchangeVouchers")
                        .HasForeignKey("FkStoresExchangeVoucherFromStoresId");
                });

            modelBuilder.Entity("Entities.Model.TblFavorites", b =>
                {
                    b.HasOne("Entities.Model.TblClient", "FkClient")
                        .WithMany("TblFavorites")
                        .HasForeignKey("FkClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblItems", "FkItems")
                        .WithMany("TblFavorites")
                        .HasForeignKey("FkItemsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblHandStockValue", b =>
                {
                    b.HasOne("Entities.Model.TblSalesmen", "FkSalesmanHandStockValueSales")
                        .WithMany("TblHandStockValue")
                        .HasForeignKey("FkSalesmanHandStockValueSalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblIndoorInvoiceDetails", b =>
                {
                    b.HasOne("Entities.Model.TblIndoorInvoiceHeader", "FkIndoorInvoiceHeaderIndoorInvoiceDetailsHeader")
                        .WithMany("TblIndoorInvoiceDetails")
                        .HasForeignKey("FkIndoorInvoiceHeaderIndoorInvoiceDetailsHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblItems", "FkItemsAdditionVoucherDetailsItems")
                        .WithMany("TblIndoorInvoiceDetails")
                        .HasForeignKey("FkItemsAdditionVoucherDetailsItemsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblIndoorInvoiceHeader", b =>
                {
                    b.HasOne("Entities.Model.TblBranches", "FkBranchesIndoorSalesInvoiceBranch")
                        .WithMany("TblIndoorInvoiceHeader")
                        .HasForeignKey("FkBranchesIndoorSalesInvoiceBranchId");

                    b.HasOne("Entities.Model.TblEmployees", "FkEmployeesIndoorSalesInvoiceEmployee")
                        .WithMany("TblIndoorInvoiceHeader")
                        .HasForeignKey("FkEmployeesIndoorSalesInvoiceEmployeeId");
                });

            modelBuilder.Entity("Entities.Model.TblItems", b =>
                {
                    b.HasOne("Entities.Model.TblOffers", "FkOffersItemsOffer")
                        .WithMany("TblItems")
                        .HasForeignKey("FkOffersItemsOfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblSubCategories", "FkSubCategoriesItemsSubcategory")
                        .WithMany("TblItems")
                        .HasForeignKey("FkSubCategoriesItemsSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblItemTransactionss", b =>
                {
                    b.HasOne("Entities.Model.TblItems", "FkItemsStocksItem")
                        .WithMany("TblItemTransactionss")
                        .HasForeignKey("FkItemsStocksItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblOfferTarget", b =>
                {
                    b.HasOne("Entities.Model.TblOffers", "FkOfferOfferTargetOffre")
                        .WithMany("TblOfferTarget")
                        .HasForeignKey("FkOfferOfferTargetOffreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblOrderDetails", b =>
                {
                    b.HasOne("Entities.Model.TblItems", "FkItems")
                        .WithMany("TblOrderDetails")
                        .HasForeignKey("FkItemsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblOrders", "Order")
                        .WithMany("TblOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblOrders", b =>
                {
                    b.HasOne("Entities.Model.TblClient", "FkClientsOrdersClient")
                        .WithMany("TblOrders")
                        .HasForeignKey("FkClientsOrdersClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblPromoTargets", b =>
                {
                    b.HasOne("Entities.Model.TblClient", "Client")
                        .WithMany("TblPromoTargets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblPromos", "FkPromosPromoTargetsPromo")
                        .WithMany("TblPromoTargets")
                        .HasForeignKey("FkPromosPromoTargetsPromoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSalesAreaClients", b =>
                {
                    b.HasOne("Entities.Model.TblClient", "FkSalesAreaClientsClientsClient")
                        .WithOne("TblSalesAreaClients")
                        .HasForeignKey("Entities.Model.TblSalesAreaClients", "FkSalesAreaClientsClientsClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblSalesArea", "FkSalesAreaClientsSalesAreasSalesArea")
                        .WithMany("TblSalesAreaClients")
                        .HasForeignKey("FkSalesAreaClientsSalesAreasSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSalesAreaPersonnel", b =>
                {
                    b.HasOne("Entities.Model.TblSalesArea", "FkSalesAreaPersonnelSalesAreasSalesArea")
                        .WithMany("TblSalesAreaPersonnel")
                        .HasForeignKey("FkSalesAreaPersonnelSalesAreasSalesAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblSalesmen", "FkSalesAreaPersonnelSalesmenSales")
                        .WithOne("TblSalesAreaPersonnel")
                        .HasForeignKey("Entities.Model.TblSalesAreaPersonnel", "FkSalesAreaPersonnelSalesmenSalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSalesmen", b =>
                {
                    b.HasOne("Entities.Model.TblEmployees", "FkSalesmenEmployee")
                        .WithOne("TblSalesmen")
                        .HasForeignKey("Entities.Model.TblSalesmen", "FkSalesmenEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSalesStock", b =>
                {
                    b.HasOne("Entities.Model.TblItems", "FkItemsSalesStockItems")
                        .WithMany("TblSalesStock")
                        .HasForeignKey("FkItemsSalesStockItemsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Model.TblSalesmen", "FkSalesmanSalesStockSales")
                        .WithMany("TblSalesStock")
                        .HasForeignKey("FkSalesmanSalesStockSalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblStocks", b =>
                {
                    b.HasOne("Entities.Model.TblItems", "FkItemsStocksItem")
                        .WithMany("TblStocks")
                        .HasForeignKey("FkItemsStocksItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSubCategories", b =>
                {
                    b.HasOne("Entities.Model.TblCategories", "FkCategoriesSubCategoriesCategory")
                        .WithMany("TblSubCategories")
                        .HasForeignKey("FkCategoriesSubCategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSubDepartments", b =>
                {
                    b.HasOne("Entities.Model.TblDepartments", "FkDepartmentsSubDepartmentsDepartment")
                        .WithMany("TblSubDepartments")
                        .HasForeignKey("FkDepartmentsSubDepartmentsDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSupplierAccounts", b =>
                {
                    b.HasOne("Entities.Model.TblSuppliers", "FkSuppliersSupplierAccountsSuppliers")
                        .WithMany("TblSupplierAccounts")
                        .HasForeignKey("FkSuppliersSupplierAccountsSuppliersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblSuppliers", b =>
                {
                    b.HasOne("Entities.Model.LkpCountries", "FkCountrySupplierCountry")
                        .WithMany("TblSuppliers")
                        .HasForeignKey("FkCountrySupplierCountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Model.TblVisit", b =>
                {
                    b.HasOne("Entities.Model.TblClient", "FkClientsVisitClient")
                        .WithMany("TblVisit")
                        .HasForeignKey("FkClientsVisitClientId");

                    b.HasOne("Entities.Model.TblSalesmen", "FkSalesmanVisitSalesman")
                        .WithMany("TblVisit")
                        .HasForeignKey("FkSalesmanVisitSalesmanId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
